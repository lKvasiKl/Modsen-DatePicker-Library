{"version":3,"file":"main.06820610.iframe.bundle.js","mappings":";AAYA;;AALA;AAQA;AANA;AAQA;AACA;;;;;;AAOA;;;;;;;ACXA;;;;AAMA;AACA;;AAIA;AACA;;;AAGA;;ACVA;AAEA;AALA;AAoBA;;;;;AAKA;;AAKA;AA/BA;;;;;ACVA;;;;AAWA;;;AAKA;AACA;;AAhBA;AACA;;;ACIA;;AAJA;AACA;AAJA;AACA;AACA;;;;ACCA;AADA;AAMA;AAEA;;;;;;ACIA;AACA;;AAdA;AAmBA;AAhBA;AAkBA;AACA;AACA;;;;;AAOA;AACA;AAGA;AACA;;AAlCA;AACA;AAEA;AAsCA;;;;;ACpCA;AACA;;AAPA;AAYA;AACA;;;;ACdA;;;;;ACMA;;AAIA;AAVA;AAYA;;;;AAMA;AAjBA;AACA;;;;ACmCA;AClCA;AAMA;AACA;;;;AAMA;AACA;;AAEA;;;;AAMA;;AArBA;;AC8CA;;;;;;ACrCA;AAXA;AACA;AAFA;AADA;;;;;;;AA0BA;;;;;;;ACIA;AC9BA;;;;;;ACqEA;;ACjEA;;;;;;;;;AAWA;AACA;AACA;AACA;;;;;AAOA;AACA;AACA;;;AAKA;;;;AAMA;AACA;;AAEA;AACA;AAGA;AACA;;AAEA;AACA;AACA;;;;;;AC9CA;AACA;;;AAKA;;;AAKA;AACA;AACA","sources":["webpack://@lkvasikl/modsen-datepicker-library/./src/components/Calendar/Button/styled.ts","webpack://@lkvasikl/modsen-datepicker-library/./src/components/Calendar/DayOfWeekGrid/styled.ts","webpack://@lkvasikl/modsen-datepicker-library/./src/components/Calendar/DayOfWeek/styled.ts","webpack://@lkvasikl/modsen-datepicker-library/./src/components/Calendar/GridSlider/styled.ts","webpack://@lkvasikl/modsen-datepicker-library/./src/components/Calendar/Weekday/styled.ts","webpack://@lkvasikl/modsen-datepicker-library/./src/components/Calendar/styled.ts","webpack://@lkvasikl/modsen-datepicker-library/./src/components/DatePicker/styled.ts","webpack://@lkvasikl/modsen-datepicker-library/./src/components/ErrorBoundary/styled.ts","webpack://@lkvasikl/modsen-datepicker-library/./src/components/RangeDatePicker/styled.ts","webpack://@lkvasikl/modsen-datepicker-library/./src/components/TodosModal/TodoInput/styled.ts","webpack://@lkvasikl/modsen-datepicker-library/./src/components/TodosModal/TodoInput/index.tsx","webpack://@lkvasikl/modsen-datepicker-library/./src/components/TodosModal/TodoItem/styled.ts","webpack://@lkvasikl/modsen-datepicker-library/./src/components/TodosModal/TodoItem/index.tsx","webpack://@lkvasikl/modsen-datepicker-library/./src/components/Modal/styled.ts","webpack://@lkvasikl/modsen-datepicker-library/./src/components/Modal/index.tsx","webpack://@lkvasikl/modsen-datepicker-library/./src/components/TodosModal/styled.ts","webpack://@lkvasikl/modsen-datepicker-library/./src/components/TodosModal/index.tsx","webpack://@lkvasikl/modsen-datepicker-library/./src/constants/styles/global.ts","webpack://@lkvasikl/modsen-datepicker-library/./src/constants/styles/mixins.ts"],"sourcesContent":["import { styled, DefaultTheme } from \"styled-components\";\r\n\r\nimport { Button } from \"constants/styles/global\";\r\nimport { baseText } from \"constants/styles/mixins\";\r\n\r\nimport { ButtonStyledProps } from \"./types\";\r\n\r\nconst spaceS = ({ theme }: DefaultTheme) => theme.spaces.s;\r\nconst grayColor = ({ theme }: DefaultTheme) => theme.colors.gray;\r\nconst whiteColor = ({ theme }: DefaultTheme) => theme.colors.white;\r\n\r\nexport const ButtonContainer = styled(Button)<ButtonStyledProps>`\r\n  ${baseText}\r\n\r\n  padding: ${spaceS}px 0;\r\n  border: 1px solid ${grayColor};\r\n  background-color: ${whiteColor};\r\n  border-bottom: ${({ $isTodosEnabled }) => $isTodosEnabled && `none`};\r\n  border-radius: ${({ $isTodosEnabled }) =>\r\n    $isTodosEnabled ? \"0\" : \"0 0 8px 8px\"};\r\n  width: 100%;\r\n  min-width: 224px;\r\n  justify-content: space-between;\r\n\r\n  &:hover {\r\n    background-color: ${grayColor};\r\n  }\r\n`;\r\n","import { styled, DefaultTheme } from \"styled-components\";\r\n\r\nimport { Container } from \"constants/styles/global\";\r\nimport { baseText } from \"constants/styles/mixins\";\r\n\r\nconst spaceM = ({ theme }: DefaultTheme) => theme.spaces.m;\r\n\r\nexport const DayOfWeekGridContainer = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(7, 1fr);\r\n  grid-template-rows: repeat(1, 1fr);\r\n  width: fit-content;\r\n`;\r\n\r\nexport const YearCalendarContainer = styled(DayOfWeekGridContainer)`\r\n  grid-template-columns: repeat(4, 1fr);\r\n  grid-template-rows: repeat(3, 1fr);\r\n  align-items: baseline;\r\n`;\r\n\r\nexport const MiniCalendarWrapper = styled(Container)`\r\n  padding: ${spaceM}px;\r\n  flex-direction: column;\r\n`;\r\n\r\nexport const MonthText = styled.p`\r\n  ${baseText}\r\n\r\n  align-self: flex-start;\r\n  padding-left: ${spaceM}px;\r\n`;\r\n","import { DefaultTheme, styled } from \"styled-components\";\r\n\r\nimport { determineRadius } from \"utils/borderRadiusCalculator\";\r\nimport {\r\n  determineBackgroundColor,\r\n  determineTextColor,\r\n} from \"utils/colorCalculator\";\r\n\r\nimport { Button } from \"constants/styles/global\";\r\n\r\nimport { DayOfWeekStyleProps } from \"./types\";\r\n\r\nconst grayColor = ({ theme }: DefaultTheme) => theme.colors.gray;\r\nconst darkBlueHoverColor = ({ theme }: DefaultTheme) =>\r\n  theme.colors.darkBlueHover;\r\nconst orangeColor = ({ theme }: DefaultTheme) => theme.colors.orange;\r\nconst spaceM = ({ theme }: DefaultTheme) => theme.spaces.m;\r\n\r\nexport const DayOfWeekButton = styled(Button)<DayOfWeekStyleProps>`\r\n  background-color: ${({ $isSelected, $rangeState }) =>\r\n    determineBackgroundColor($isSelected, $rangeState)};\r\n  color: ${({\r\n    $isSelected,\r\n    $isDisabled,\r\n    $isWeekend,\r\n    $rangeState,\r\n    $isHoliday,\r\n  }) =>\r\n    determineTextColor(\r\n      $isSelected,\r\n      $isDisabled,\r\n      $isWeekend,\r\n      $rangeState,\r\n      $isHoliday,\r\n    )};\r\n  padding: ${spaceM}px;\r\n  border-radius: ${({ $rangeState }) => determineRadius($rangeState)};\r\n  width: 32px;\r\n  height: 38px;\r\n\r\n  &:hover {\r\n    background-color: ${({ $isSelected }) =>\r\n      $isSelected ? darkBlueHoverColor : grayColor};\r\n  }\r\n`;\r\n\r\nexport const Dot = styled.div`\r\n  background-color: ${orangeColor};\r\n  width: 3px;\r\n  height: 3px;\r\n  border-radius: 50%;\r\n`;\r\n","import { styled, DefaultTheme } from \"styled-components\";\r\n\r\nimport { Button, Container } from \"constants/styles/global\";\r\nimport { baseText } from \"constants/styles/mixins\";\r\n\r\nconst spaceS = ({ theme }: DefaultTheme) => theme.spaces.s;\r\nconst fontSizeM = ({ theme }: DefaultTheme) => theme.fonts.fontSize.m;\r\nconst fontWeightL = ({ theme }: DefaultTheme) => theme.fonts.fontWeight.l;\r\n\r\nexport const SliderContainer = styled(Container)`\r\n  padding: ${spaceS}px 0;\r\n  width: 100%;\r\n  min-width: 224px;\r\n  justify-content: space-between;\r\n`;\r\n\r\nexport const SliderButton = styled(Button)`\r\n  width: 16px;\r\n  height: 16px;\r\n`;\r\n\r\nexport const Title = styled.h1`\r\n  ${baseText}\r\n\r\n  font-size: ${fontSizeM}px;\r\n  font-weight: ${fontWeightL};\r\n  cursor: pointer;\r\n`;\r\n","import { styled, DefaultTheme } from \"styled-components\";\r\n\r\nimport { baseText } from \"constants/styles/mixins\";\r\n\r\nconst whiteColor = ({ theme }: DefaultTheme) => theme.colors.white;\r\nconst blackColor = ({ theme }: DefaultTheme) => theme.colors.black;\r\nconst spaceM = ({ theme }: DefaultTheme) => theme.spaces.m;\r\nconst fontSizeM = ({ theme }: DefaultTheme) => theme.fonts.fontSize.m;\r\nconst fontWeightL = ({ theme }: DefaultTheme) => theme.fonts.fontWeight.l;\r\n\r\nexport const WeekdayContainer = styled.div`\r\n  ${baseText}\r\n\r\n  font-size: ${fontSizeM}px;\r\n  font-weight: ${fontWeightL};\r\n  background-color: ${whiteColor};\r\n  color: ${blackColor};\r\n  padding: ${spaceM}px;\r\n  width: 32px;\r\n  height: 32px;\r\n`;\r\n","import { styled, DefaultTheme } from \"styled-components\";\r\n\r\nimport { Container } from \"constants/styles/global\";\r\n\r\nimport { CalendarStyledProps } from \"./types\";\r\n\r\nconst grayColor = ({ theme }: DefaultTheme) => theme.colors.gray;\r\nconst whiteColor = ({ theme }: DefaultTheme) => theme.colors.white;\r\n\r\nexport const CalendarContainer = styled(Container)<CalendarStyledProps>`\r\n  background-color: ${whiteColor};\r\n  border: 1px solid ${grayColor};\r\n  border-bottom: ${({ $isRangeExist, $isTodosEnabled }) =>\r\n    ($isRangeExist || $isTodosEnabled) && `none`};\r\n  border-radius: ${({ $isRangeExist, $isTodosEnabled }) =>\r\n    $isRangeExist || $isTodosEnabled ? `8px 8px 0 0` : \"8px\"};\r\n  padding: 10px;\r\n  flex-direction: column;\r\n`;\r\n","import { styled, DefaultTheme } from \"styled-components\";\r\n\r\nimport { baseText } from \"constants/styles/mixins\";\r\nimport { Container } from \"constants/styles/global\";\r\n\r\nconst fontSizeL = ({ theme }: DefaultTheme) => theme.fonts.fontSize.l;\r\nconst fontSizeS = ({ theme }: DefaultTheme) => theme.fonts.fontSize.s;\r\nconst fontWeightS = ({ theme }: DefaultTheme) => theme.fonts.fontWeight.s;\r\nconst grayColor = ({ theme }: DefaultTheme) => theme.colors.gray;\r\nconst redColor = ({ theme }: DefaultTheme) => theme.colors.red;\r\nconst spaceM = ({ theme }: DefaultTheme) => theme.spaces.m;\r\nconst spaceS = ({ theme }: DefaultTheme) => theme.spaces.s;\r\n\r\nexport const DatePickerContainer = styled(Container)`\r\n  flex-direction: column;\r\n  align-items: flex-start;\r\n`;\r\n\r\nexport const Label = styled.label`\r\n  ${baseText}\r\n\r\n  font-size: ${fontSizeL}px;\r\n`;\r\n\r\nexport const DatePickerInputWrapper = styled(Container)`\r\n  border: 1px solid ${grayColor};\r\n  padding: ${spaceM}px;\r\n  margin: ${spaceM}px 0;\r\n  gap: ${spaceS}px;\r\n  width: 246px;\r\n  justify-content: flex-start;\r\n  border-radius: 8px;\r\n  position: relative;\r\n`;\r\n\r\nexport const InfoContainer = styled(Container)`\r\n  gap: ${spaceS}px;\r\n`;\r\n\r\nexport const Error = styled.span`\r\n  ${baseText}\r\n\r\n  font-size: ${fontSizeS}px;\r\n  font-weight: ${fontWeightS};\r\n  color: ${redColor};\r\n`;\r\n\r\nexport const CalendarWrapper = styled.div`\r\n  position: absolute;\r\n  top: 56%;\r\n`;\r\n","import { styled, DefaultTheme } from \"styled-components\";\r\n\r\nimport { Container } from \"constants/styles/global\";\r\nimport { baseText } from \"constants/styles/mixins\";\r\n\r\nconst redColor = ({ theme }: DefaultTheme) => theme.colors.red;\r\n\r\nexport const ErrorBoundaryContainer = styled(Container)`\r\n  flex-direction: column;\r\n`;\r\n\r\nexport const Error = styled.p`\r\n  ${baseText}\r\n\r\n  color: ${redColor};\r\n`;\r\n\r\nexport const Text = styled.span`\r\n  ${baseText}\r\n\r\n  text-align: center;\r\n`;\r\n","import { styled, DefaultTheme } from \"styled-components\";\r\n\r\nimport { Container } from \"constants/styles/global\";\r\n\r\nconst spaceM = ({ theme }: DefaultTheme) => theme.spaces.m;\r\n\r\nexport const RangeDatePickerWrapper = styled(Container)`\r\n  gap: ${spaceM}px;\r\n  flex-direction: row;\r\n`;\r\n","import { styled, DefaultTheme } from \"styled-components\";\r\n\r\nimport { Button, Container } from \"constants/styles/global\";\r\n\r\nconst lightGrayColor = ({ theme }: DefaultTheme) => theme.colors.lightGray;\r\nconst darkBlueColor = ({ theme }: DefaultTheme) => theme.colors.darkBlue;\r\nconst whiteColor = ({ theme }: DefaultTheme) => theme.colors.white;\r\nconst spaceM = ({ theme }: DefaultTheme) => theme.spaces.m;\r\n\r\nexport const Wrapper = styled(Container)`\r\n  gap: ${spaceM}px;\r\n  width: 100%;\r\n`;\r\n\r\nexport const InputWrapper = styled(Container)`\r\n  border: 1px solid ${lightGrayColor};\r\n  margin: ${spaceM}px 0;\r\n  width: 100%;\r\n  justify-content: flex-start;\r\n  border-radius: 8px;\r\n`;\r\n\r\nexport const InputButton = styled(Button)`\r\n  background-color: ${darkBlueColor};\r\n  color: ${whiteColor};\r\n  width: 100px;\r\n  height: 40px;\r\n  border-radius: 8px;\r\n`;\r\n","import React, { ChangeEvent } from \"react\";\r\n\r\nimport { BaseInput } from \"constants/styles/global\";\r\n\r\nimport { TodoInputProps } from \"./types\";\r\nimport { BUTTON_TEXT, PLACEHOLDER } from \"./config\";\r\nimport { Wrapper, InputButton, InputWrapper } from \"./styled\";\r\n\r\nconst TodoInput = React.memo(\r\n  ({ todoText, onChange, onAddTask }: TodoInputProps) => {\r\n    const handleInputChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n      onChange(e);\r\n    };\r\n\r\n    const handleAddTodo = () => {\r\n      onAddTask();\r\n    };\r\n\r\n    const handleInputKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n      if (e.key === \"Enter\") {\r\n        handleAddTodo();\r\n      }\r\n    };\r\n\r\n    return (\r\n      <Wrapper>\r\n        <InputWrapper>\r\n          <BaseInput\r\n            placeholder={PLACEHOLDER}\r\n            type=\"text\"\r\n            value={todoText}\r\n            onChange={handleInputChange}\r\n            onKeyDown={handleInputKeyDown}\r\n          />\r\n        </InputWrapper>\r\n        <InputButton onClick={handleAddTodo}>{BUTTON_TEXT}</InputButton>\r\n      </Wrapper>\r\n    );\r\n  },\r\n);\r\n\r\nexport default TodoInput;\r\n","import { styled, DefaultTheme } from \"styled-components\";\r\n\r\nimport { baseText } from \"constants/styles/mixins\";\r\nimport { Button, Container } from \"constants/styles/global\";\r\n\r\nimport { TodoItemStyledProps } from \"./types\";\r\n\r\nconst lightGrayColor = ({ theme }: DefaultTheme) => theme.colors.lightGray;\r\nconst redColor = ({ theme }: DefaultTheme) => theme.colors.red;\r\nconst spaceM = ({ theme }: DefaultTheme) => theme.spaces.m;\r\n\r\nexport const TodoWrapper = styled(Container)`\r\n  border: 1px solid ${lightGrayColor};\r\n  gap: ${spaceM}px;\r\n  padding: ${spaceM}px;\r\n  justify-content: flex-start;\r\n  width: 100%;\r\n  border-radius: 8px;\r\n`;\r\n\r\nexport const TodoText = styled.p<TodoItemStyledProps>`\r\n  ${baseText}\r\n\r\n  text-decoration: ${({ $isDone }) => ($isDone ? \"line-through\" : \"none\")};\r\n  width: 100%;\r\n  max-width: 433px;\r\n  word-wrap: break-word;\r\n`;\r\n\r\nexport const DeleteTaskButton = styled(Button)`\r\n  &:hover {\r\n    color: ${redColor};\r\n  }\r\n`;\r\n","import React, { useCallback } from \"react\";\r\n\r\nimport { useCalendar } from \"providers/CalendarProvider\";\r\n\r\nimport { getCache, saveCache } from \"utils/dataCaching\";\r\n\r\nimport { Todo } from \"../types\";\r\n\r\nimport { TodoItemProps } from \"./types\";\r\nimport { BUTTON_TEXT } from \"./config\";\r\nimport { DeleteTaskButton, TodoText, TodoWrapper } from \"./styled\";\r\n\r\nconst TodoItem = React.memo((props: TodoItemProps) => {\r\n  const { id, todoText, isDone, setTodos } = props;\r\n\r\n  const { selectedDate } = useCalendar();\r\n\r\n  const handleCheckboxChange = useCallback(() => {\r\n    const TODO_CACHE_KEY = selectedDate.toDateString();\r\n    const todos = getCache<Todo[]>(TODO_CACHE_KEY);\r\n\r\n    const updatedTodos = todos.map((todo) => {\r\n      if (todo.id === id) {\r\n        return { ...todo, isDone: !todo.isDone };\r\n      }\r\n\r\n      return todo;\r\n    });\r\n\r\n    setTodos(updatedTodos);\r\n    saveCache(TODO_CACHE_KEY, updatedTodos);\r\n  }, [id, selectedDate, setTodos]);\r\n\r\n  const handleDeleteTodo = useCallback(() => {\r\n    const TODO_CACHE_KEY = selectedDate.toDateString();\r\n    const todos = getCache<Todo[]>(TODO_CACHE_KEY);\r\n\r\n    const updatedTodos = todos.filter((todo) => todo.id !== id);\r\n\r\n    setTodos(updatedTodos);\r\n    saveCache(TODO_CACHE_KEY, updatedTodos);\r\n  }, [id, selectedDate, setTodos]);\r\n\r\n  return (\r\n    <TodoWrapper>\r\n      <input checked={isDone} type=\"checkbox\" onChange={handleCheckboxChange} />\r\n      <TodoText $isDone={isDone}>{todoText}</TodoText>\r\n      <DeleteTaskButton onClick={handleDeleteTodo}>\r\n        {BUTTON_TEXT}\r\n      </DeleteTaskButton>\r\n    </TodoWrapper>\r\n  );\r\n});\r\n\r\nexport default TodoItem;\r\n","import { styled, DefaultTheme } from \"styled-components\";\r\n\r\nimport { Button, Container } from \"constants/styles/global\";\r\n\r\nconst spaceM = ({ theme }: DefaultTheme) => theme.spaces.m;\r\nconst grayColor = ({ theme }: DefaultTheme) => theme.colors.gray;\r\nconst lightGrayColor = ({ theme }: DefaultTheme) => theme.colors.lightGray;\r\nconst whiteColor = ({ theme }: DefaultTheme) => theme.colors.white;\r\n\r\nexport const ModalContainer = styled(Container)`\r\n  height: 100%;\r\n  width: 100%;\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n`;\r\n\r\nexport const ModalWindow = styled(Container)`\r\n  box-shadow: 0px 0px 13px 0px ${lightGrayColor};\r\n  background-color: ${whiteColor};\r\n  border: 1px solid ${grayColor};\r\n  padding: ${spaceM}px;\r\n  flex-direction: column;\r\n  width: 100%;\r\n  max-width: 550px;\r\n  height: fit-content;\r\n  position: relative;\r\n  border-radius: 10px;\r\n`;\r\n\r\nexport const CloseButton = styled(Button)`\r\n  align-self: flex-end;\r\n  transition: transform 0.3s;\r\n\r\n  &:hover {\r\n    transform: scale(1.15);\r\n  }\r\n`;\r\n","import React, { useRef } from \"react\";\r\nimport { ICONS } from \"assets\";\r\n\r\nimport useClickOutside from \"hooks/useClickOutside\";\r\n\r\nimport { Icon } from \"constants/styles/global\";\r\n\r\nimport { ModalProps } from \"./types\";\r\nimport { CloseButton, ModalWindow, ModalContainer } from \"./styled\";\r\n\r\nconst Modal = React.memo(({ children, onClose }: ModalProps) => {\r\n  const modalRef = useRef<HTMLDivElement | null>(null);\r\n\r\n  useClickOutside(modalRef, onClose);\r\n\r\n  const handleCloseButtonClick = () => {\r\n    onClose();\r\n  };\r\n\r\n  return (\r\n    <ModalContainer>\r\n      <ModalWindow ref={modalRef}>\r\n        <CloseButton\r\n          data-testid=\"modal-close-button\"\r\n          onClick={handleCloseButtonClick}\r\n        >\r\n          <Icon src={ICONS.close} />\r\n        </CloseButton>\r\n        {children}\r\n      </ModalWindow>\r\n    </ModalContainer>\r\n  );\r\n});\r\n\r\nexport default Modal;\r\n","import { styled, DefaultTheme } from \"styled-components\";\r\n\r\nimport { Container } from \"constants/styles/global\";\r\n\r\nconst spaceM = ({ theme }: DefaultTheme) => theme.spaces.m;\r\n\r\nexport const TasksWrapper = styled(Container)`\r\n  gap: ${spaceM}px;\r\n  justify-content: flex-start;\r\n  flex-direction: column;\r\n  width: 100%;\r\n  max-height: 350px;\r\n  overflow: auto;\r\n`;\r\n","import React, { ChangeEvent, useCallback, useState, useEffect } from \"react\";\r\nimport { TodoInput, TodoItem } from \"components\";\r\n\r\nimport { useCalendar } from \"providers/CalendarProvider\";\r\n\r\nimport Modal from \"components/Modal\";\r\n\r\nimport { getCache, saveCache } from \"utils/dataCaching\";\r\n\r\nimport { Title } from \"constants/styles/global\";\r\n\r\nimport { Todo, TodosModalProps } from \"./types\";\r\nimport { HINT, TITLE_TEXT } from \"./config\";\r\nimport { TasksWrapper } from \"./styled\";\r\n\r\nconst TodosModal = React.memo(({ onClose }: TodosModalProps) => {\r\n  const [todoText, setTodoText] = useState<string>(\"\");\r\n  const [todos, setTodos] = useState<Todo[]>([]);\r\n\r\n  const { selectedDate } = useCalendar();\r\n\r\n  useEffect(() => {\r\n    const TODO_CACHE_KEY = selectedDate.toDateString();\r\n    const cachedTodos = getCache<Todo[]>(TODO_CACHE_KEY);\r\n\r\n    if (cachedTodos) {\r\n      setTodos(cachedTodos);\r\n    }\r\n  }, [selectedDate]);\r\n\r\n  const handleCloseModal = useCallback(() => {\r\n    onClose();\r\n  }, [onClose]);\r\n\r\n  const handleInputChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n    setTodoText(e.target.value);\r\n  }, []);\r\n\r\n  const handleAddTodo = useCallback(() => {\r\n    if (todoText.trim() !== \"\") {\r\n      const TODO_CACHE_KEY = selectedDate.toDateString();\r\n      const existingTodos = [...todos];\r\n      const newTodo = {\r\n        id: String(new Date().getTime()),\r\n        todoText: todoText,\r\n        isDone: false,\r\n      };\r\n\r\n      existingTodos.push(newTodo);\r\n      setTodos(existingTodos);\r\n      saveCache(TODO_CACHE_KEY, existingTodos);\r\n\r\n      setTodoText(\"\");\r\n    }\r\n  }, [todoText, todos, selectedDate]);\r\n\r\n  const TODO_ITEMS = todos.map(({ id, ...todo }) => (\r\n    <TodoItem id={id} key={id} setTodos={setTodos} {...todo} />\r\n  ));\r\n\r\n  return (\r\n    <Modal data-testid=\"todo-modal\" onClose={handleCloseModal}>\r\n      <Title>{TITLE_TEXT.replace(\"{Date}\", selectedDate.toDateString())}</Title>\r\n      <TodoInput\r\n        todoText={todoText}\r\n        onAddTask={handleAddTodo}\r\n        onChange={handleInputChange}\r\n      />\r\n      <TasksWrapper>{todos.length !== 0 ? TODO_ITEMS : HINT}</TasksWrapper>\r\n    </Modal>\r\n  );\r\n});\r\n\r\nexport default TodosModal;\r\n","import styled, { createGlobalStyle } from \"styled-components\";\r\n\r\nimport { FONTS } from \"./fonts\";\r\nimport { baseText, contentCenter, displayFlex, flexColumn } from \"./mixins\";\r\nimport { SPACES } from \"./spaces\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n    * {\r\n        font-family: ${FONTS.fontFamily.openSans};\r\n        box-sizing: border-box;\r\n        user-select: none;\r\n        text-decoration: none;\r\n        list-style: none;\r\n        outline: none;\r\n        margin: 0;\r\n        padding: 0;\r\n    }\r\n`;\r\n\r\nexport const Button = styled.button`\r\n  ${flexColumn}\r\n  ${contentCenter}\r\n  ${baseText}\r\n  \r\n  background: transparent;\r\n  border: none;\r\n  cursor: pointer;\r\n`;\r\n\r\nexport const Container = styled.div`\r\n  ${displayFlex}\r\n  ${contentCenter}\r\n  \r\n  cursor: default;\r\n`;\r\n\r\nexport const Icon = styled.img`\r\n  width: 16px;\r\n  height: 16px;\r\n  cursor: pointer;\r\n`;\r\n\r\nexport const Title = styled.h1`\r\n  ${baseText}\r\n\r\n  font-size:  ${FONTS.fontSize.xl}px;\r\n  font-weight: ${FONTS.fontWeight.l};\r\n`;\r\n\r\nexport const BaseInput = styled.input`\r\n  ${baseText}\r\n\r\n  margin: ${SPACES.m}px;\r\n  font-size: ${FONTS.fontSize.l}px;\r\n  font-weight: ${FONTS.fontWeight.s};\r\n  width: 100%;\r\n  border: none;\r\n  background: transparent;\r\n`;\r\n","import { css } from \"styled-components\";\r\n\r\nimport { FONTS } from \"./fonts\";\r\n\r\nexport const displayFlex = css`\r\n  display: flex;\r\n`;\r\n\r\nexport const flexColumn = css`\r\n  ${displayFlex}\r\n\r\n  flex-direction: column;\r\n`;\r\n\r\nexport const contentCenter = css`\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nexport const baseText = css`\r\n  font-size: ${FONTS.fontSize.s}px;\r\n  font-weight: ${FONTS.fontWeight.m};\r\n  font-style: normal;\r\n  line-height: normal;\r\n`;\r\n"],"names":[],"sourceRoot":""}